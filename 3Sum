/*
 * 3Sum
 * Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
 * Find all unique triplets in the array which gives the sum of zero.

 Note:
 Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
 The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
  *解题思路：
  先对数组进行排序，3sum = target - num[i] 的2sum
 */
 
 class Solution {
  public:
      vector<vector<int> > threeSum(vector<int> &num) {
          int n = num.size();
          sort(num.begin(), num.end());
          vector<vector<int> > res;
          
          for(int i = 0; i < n-2; i++)
          {
             if(i > 0 && num[i] == num[i-1])continue;//重复的元素不用计算,这里不加上居然超时
             int target2 = 0 - num[i];
             twoSum(num, i+1, target2, res);
         }
         return res;
     }
     void twoSum(vector<int> &sortedNum, int start, int target, vector<vector<int> >&res)
     {
         int head = start, tail = sortedNum.size() - 1;
         while(head < tail)
         {
             int tmp = sortedNum[head] + sortedNum[tail];
             if(tmp < target)
                 head++;
             else if(tmp > target)
                 tail--;
             else
             { 
                 res.push_back(vector<int>{sortedNum[start-1], sortedNum[head], sortedNum[tail]});
                
                 //为了防止出现重复的二元组，使结果等于target
                int k = head+1;
                while(k < tail && sortedNum[k] == sortedNum[head])k++;
                head = k;
                 
                 k = tail-1;
                 while(k > head && sortedNum[k] == sortedNum[tail])k--;
                 tail = k;
             }
         }
     }
};
