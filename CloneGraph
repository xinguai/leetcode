/*
 *Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
  解题思路：
  深度优先遍历，然后递归拷贝
  用一个hash_map记录已经拷贝的节点，已经拷贝过的就不要拷贝，
  一个特点是label是唯一的，作为hash_map的key
 */
 
 /**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        std::unordered_map<int, UndirectedGraphNode*> track;
        return clone(node, track);
    }
    
     UndirectedGraphNode * clone(UndirectedGraphNode *node, 
                    std::unordered_map<int, UndirectedGraphNode*>& track){
        if (!node)
            return node;
        if (track.count(node->label))
            return track[node->label];
        UndirectedGraphNode * uGraphNode = new UndirectedGraphNode(node->label);
        //uGraphNode->neighbors.resize(node->neighbors.size());
        track[node->label] = uGraphNode;
        
        for (size_t i = 0; i < node->neighbors.size(); ++i){
            uGraphNode->neighbors.push_back(clone(node->neighbors[i], track));
        }
        return uGraphNode;
    }
};
