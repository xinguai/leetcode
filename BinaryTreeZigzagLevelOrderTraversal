/*
 *Binary Tree Zigzag Level Order Traversal Total Accepted: 28755 Total Submissions: 
 108446 My Submissions Question Solution 
Given a binary tree, return the zigzag level order traversal of its nodes' values. 
(ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
解题思路：
差不多，广度优先遍历，然后偶数行的结果翻转下
 */
 /**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        std::vector<std::vector<int> > res;
        int level_count = 0;
        std::vector<int> one_level;
        std::queue<TreeNode*> level_queue;
        if (!root)
            return res;
        level_queue.push(root);
        level_queue.push(NULL);
        
        while (!level_queue.empty()){
            TreeNode* cur_node = level_queue.front();
            level_queue.pop();
            
            if (cur_node){
                one_level.push_back(cur_node->val);
                if (cur_node->left)
                    level_queue.push(cur_node->left);
                if (cur_node->right)
                    level_queue.push(cur_node->right);
            }else {
                ++level_count;
                if (level_count%2 == 0)
                    std::reverse(one_level.begin(), one_level.end());
                res.push_back(one_level);
                one_level.clear();
                if (!level_queue.empty())
                    level_queue.push(NULL);
            }
        }
        
        return res;
    }
};
