/*
 * Given a linked list, swap every two adjacent nodes and return its head.
 * For example,
 * Given 1->2->3->4, you should return the list as 2->1->4->3.
 * Your algorithm should use only constant space. You may not modify the values in the list, 
 *only nodes itself can be changed.
 解题思路：
  这道题是链表逆序的一个变体
  关键在于：有4个指针，一个前驱一个后置，还有中间需要置换的两个指针。
  通过指针的指向的变换，调换位置，迭代完成。
 */
 
 class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
      ListNode dummy(0);
      dummy.next = head;
      ListNode* pre = &dummy;
      
      while (head && head->next){
          ListNode* nextSwap = head->next->next;
          pre->next = head->next;
          head->next->next = head;
          head->next = nextSwap;
          pre = head;
          head = nextSwap;
      }
      
      return dummy.next;
      
    }
    
};
